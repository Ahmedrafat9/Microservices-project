# Simple KubeLinter Pre-Sync Hook for ArgoCD
apiVersion: batch/v1
kind: Job
metadata:
  name: kubelinter-check
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-weight: "-1"
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  template:
    spec:
      restartPolicy: Never
      initContainers:
      - name: git-clone
        image: alpine/git:latest
        command: ["/bin/sh", "-c"]
        args:
        - |
          echo "üì• Cloning repository..."
          git clone https://github.com/Ahmedrafat9/Microservices-project.git /workspace/repo
          echo "‚úÖ Repository cloned successfully"
        volumeMounts:
        - name: shared-workspace
          mountPath: /workspace
      containers:
      - name: kubelinter
        image: stackrox/kube-linter:latest
        command: ["/bin/sh", "-c"]
        args:
        - |
          echo "üîç Checking for privileged containers and missing probes..."
          
          cd /workspace/repo
          
          # Check if kubernetes-manifests directory exists
          if [ ! -d "kubernetes-manifests" ]; then
            echo "‚ùå 'kubernetes-manifests' directory not found!"
            exit 1
          fi
          
          # Run KubeLinter - only check privileged containers and missing probes
          echo "üìã Checking for privileged containers and missing probes..."
          kube-linter lint "kubernetes-manifests" \
            --include privileged-containers,no-liveness-probe,no-readiness-probe \
            --format json > /tmp/results.json || true
          
          # Show results
          if [ -s /tmp/results.json ]; then
            echo ""
            echo "üö® Issues Found:"
            cat /tmp/results.json | jq -r '.Reports[]? | "‚ùå \(.Check): \(.Object.K8sObject.Kind)/\(.Object.K8sObject.Name) - \(.Diagnostic.Message)"'
            
            # Check for privileged containers and missing probes
            CRITICAL=$(cat /tmp/results.json | jq -r '.Reports[]? | select(.Check | contains("privileged-containers") or contains("no-liveness-probe") or contains("no-readiness-probe")) | .Check' | wc -l)
            
            if [ "$CRITICAL" -gt 0 ]; then
              echo ""
              echo "üí• Found privileged containers or missing health probes!"
              echo "üö´ Deployment blocked - please fix:"
              echo "   ‚Ä¢ Remove privileged: true from containers"
              echo "   ‚Ä¢ Add livenessProbe to containers"
              echo "   ‚Ä¢ Add readinessProbe to containers"
              exit 1
            fi
          else
            echo "‚úÖ No issues found - all checks passed!"
          fi
        volumeMounts:
        - name: shared-workspace
          mountPath: /workspace
      volumes:
      - name: shared-workspace
        emptyDir: {}
